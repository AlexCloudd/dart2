import 'dart:io';
import 'dart:math';

void main() {
  while (true) {
    print("\nВыберите режим игры:");
    print("1 - Игрок против Игрока");
    print("2 - Игрок против Бота");
    stdout.write("Введите 1 или 2: ");
    String? gameMode = stdin.readLineSync();

    if (gameMode != "1" && gameMode != "2") {
      print("Неверный выбор, попробуйте снова.");
      continue;
    }

    stdout.write("\nВведите размер игрового поля (от 3 до 9): ");
    int? boardSize = int.tryParse(stdin.readLineSync() ?? "");

    if (boardSize == null || boardSize < 3 || boardSize > 9) {
      print("Некорректный ввод. Используется стандартное поле 3x3.");
      boardSize = 3;
    }

    GameSession game = GameSession(boardSize, gameMode == "2");
    game.startSession();

    print("\nХотите сыграть снова? (y/n): ");
    String? restartGame = stdin.readLineSync()?.toLowerCase();
    if (restartGame != "y") break;
  }
}

class GameSession {
  final int boardSize;
  final bool isPlayingAgainstBot;
  late List<List<String>> board;
  String currentPlayer = "X";
  Random random = Random();

  GameSession(this.boardSize, this.isPlayingAgainstBot) {
    board = List.generate(boardSize, (_) => List.generate(boardSize, (_) => "."));
  }

  void startSession() {
    currentPlayer = random.nextBool() ? "X" : "O";
    print("\nПервым ходит: $currentPlayer");
    while (true) {
      displayBoard();
      if (isPlayingAgainstBot && currentPlayer == "O") {
        botTurn();
      } else {
        playerTurn();
      }

      if (checkVictory(currentPlayer)) {
        displayBoard();
        print("Игрок '$currentPlayer' победил!");
        return;
      }

      if (isTie()) {
        displayBoard();
        print("Ничья!");
        return;
      }

      currentPlayer = (currentPlayer == "X") ? "O" : "X";
    }
  }

  void displayBoard() {
    print("   " + List.generate(boardSize, (i) => i + 1).join("  "));

    for (int i = 0; i < boardSize; i++) {
      print("${i + 1}  " + board[i].join("  "));
    }
    print("");
  }

  void playerTurn() {
    while (true) {
      stdout.write("Игрок '$currentPlayer', введите координаты (строка и колонка через пробел): ");
      List<String> input = stdin.readLineSync()?.split(" ") ?? [];
      if (input.length != 2) {
        print("Некорректный ввод. Попробуйте снова.");
        continue;
      }

      int? row = int.tryParse(input[0]);
      int? col = int.tryParse(input[1]);

      if (row == null || col == null || row < 1 || row > boardSize || col < 1 || col > boardSize || board[row - 1][col - 1] != ".") {
        print("Некорректный ход. Попробуйте снова.");
      } else {
        board[row - 1][col - 1] = currentPlayer;
        return;
      }
    }
  }

  void botTurn() {
    print("Бот '$currentPlayer' делает ход...");
    List<List<int>> emptyCells = [];

    for (int i = 0; i < boardSize; i++) {
      for (int j = 0; j < boardSize; j++) {
        if (board[i][j] == ".") emptyCells.add([i, j]);
      }
    }

    if (emptyCells.isNotEmpty) {
      var move = emptyCells[random.nextInt(emptyCells.length)];
      board[move[0]][move[1]] = currentPlayer;
    }
  }

  bool checkVictory(String player) {
    for (int i = 0; i < boardSize; i++) {
      if (board[i].every((cell) => cell == player) || 
          List.generate(boardSize, (j) => board[j][i]).every((cell) => cell == player)) {
        return true;
      }
    }

    if (List.generate(boardSize, (i) => board[i][i]).every((cell) => cell == player) || 
        List.generate(boardSize, (i) => board[i][boardSize - 1 - i]).every((cell) => cell == player)) {
      return true;
    }

    return false;
  }

  bool isTie() {
    return board.every((row) => row.every((cell) => cell != "."));
  }
}
